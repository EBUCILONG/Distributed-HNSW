#/******************************************************************************
# * SConstruct
# *
# * Source of KaHIP -- Karlsruhe High Quality Partitioning.
# *****************************************************************************/



# scons build file for the KaHIP.
#
# You can build it in the following variants:
#
#   optimized            no debug symbols, no assertions, optimization.
#   optimized_output     no debug symbols, no assertions, optimization -- more output on console.
#
#   scons variant=${variant} program=${program}
import os
import platform
import sys

# Get the current platform.
SYSTEM = platform.uname()[0]
HOST = platform.uname()[1]

# Get shortcut to $HOME.
HOME = os.environ['HOME']

def GetEnvironment():
  """Get environment variables from command line and environment.

  Exits on errors.

  Returns
    Environment with the configuration from the command line.
  """
  opts = Variables()
  opts.Add('variant', 'the variant to build, optimized or optimized with output', 'optimized')
  opts.Add('program', 'program or interface to compile', 'parallel_label_compress')

  env = Environment(options=opts, ENV=os.environ)
  if not env['variant'] in ['optimized','optimized_nooutput','debug']:
    print 'Illegal value for variant: %s' % env['variant']
    sys.exit(1)
  
  if not env['program'] in ['parhip','edge_list_to_metis_graph','friendster_list_to_metis_graph','parallel_label_compress_reps','yahoo_to_metis','parmetis_driver','graph2binary','graph2binary_external','readbgf','toolbox','dspac']:
    print 'Illegal value for program: %s' % env['program']
    sys.exit(1)

  # Special configuration for 64 bit machines.
  if platform.architecture()[0] == '64bit':
     env.Append(CPPFLAGS=['-DPOINTER64=1'])

  return env

# Get the common environment.
env = GetEnvironment()

env.Append(CPPPATH=['./extern/argtable3-3.0.3/'])
env.Append(CPPPATH=['./lib'])
env.Append(CPPPATH=['./lib/tools'])
env.Append(CPPPATH=['./lib/partition'])
env.Append(CPPPATH=['./lib/io'])
env.Append(CPPPATH=['./lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/'])
env.Append(LIBPATH=['../extern/kaHIP_lib/'])
env.Append(CPPPATH=['../extern/kaHIP_lib/'])
env.Append(CPPPATH=['../lib'])
env.Append(CPPPATH=['../lib/tools'])
env.Append(CPPPATH=['../lib/partition'])
env.Append(CPPPATH=['../lib/io'])
env.Append(CPPPATH=['../lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/'])
env.Append(LIBPATH=['/home/kit/iti/ma3812/local/opt/argtable-2.10/lib'])
env.Append(LIBPATH=['/home/c_schulz/local/opt/myopenmpi-1.10.0/lib/'])

conf = Configure(env)

if SYSTEM == 'Darwin':
        env.Append(CPPPATH=['/opt/local/include/','../include'])
        env.Append(LIBPATH=['/opt/local/lib/'])
        # homebrew related paths
        env.Append(LIBPATH=['/usr/local/lib/'])
        

#if not conf.CheckCXXHeader('mpi.h'):
	#print "openmpi header not found. Exiting"
	#Exit(-1)
#
#
env.Append(CXXFLAGS = '-fopenmp')
# Apply variant specific settings.
#

if "clang" in env['CC'] or "clang" in env['CXX']:
        if env['variant'] == 'optimized':
                  env.Append(CXXFLAGS = '-DNDEBUG -Wall -funroll-loops  -O3 -std=c++0x -Wall -Wno-literal-suffix -ffast-math -Wno-unused-result')
                  env.Append(CCFLAGS  = '-O3  -DNDEBUG -funroll-loops -ffast-math -Wno-unused-result')
        elif env['variant'] == 'optimized_nooutput':
          # A little bit more output on the console
          env.Append(CXXFLAGS = ' -DNDEBUG -DNOOUTPUT -funroll-loops -Wall -O3 -std=c++0x -ffast-math')
          env.Append(CCFLAGS  = '-O3  -DNDEBUG -DNOOUTPUT -DKAFFPAOUTPUT -ffast-math')
        elif env['variant'] == 'debug':
          # A little bit more output on the console
          env.Append(CXXFLAGS = '-Wall -g -pg -std=c++0x')
          env.Append(CCFLAGS  = '-g -pg  -std=c++0x')
        else:
          env.Append(CXXFLAGS = ' -DNDEBUG -Wall -funroll-loops -O3')
          env.Append(CCFLAGS  = '-O3  -DNDEBUG -funroll-loops  ')

else:
        if env['variant'] == 'optimized':
          env.Append(CXXFLAGS = '-DNDEBUG -Wall -funroll-loops  -fno-stack-limit -O3 -std=c++0x -Wall -Wno-literal-suffix -ffast-math -Wno-unused-result -fpermissive')
          env.Append(CCFLAGS  = '-O3  -DNDEBUG -funroll-loops -ffast-math -Wno-unused-result -fpermissive')
        elif env['variant'] == 'optimized_nooutput':
          # A little bit more output on the console
          env.Append(CXXFLAGS = ' -DNDEBUG -DNOOUTPUT -funroll-loops -Wall -fno-stack-limit -O3 -std=c++0x -ffast-math -fpermissive')
          env.Append(CCFLAGS  = '-O3  -DNDEBUG -DNOOUTPUT -DKAFFPAOUTPUT -ffast-math -fpermissive')
        elif env['variant'] == 'debug':
          # A little bit more output on the console
          env.Append(CXXFLAGS = '-Wall -fno-stack-limit -g -pg -std=c++0x')
          env.Append(CCFLAGS  = '-g -pg  -std=c++0x')
        else:
          env.Append(CXXFLAGS = ' -DNDEBUG -Wall -funroll-loops  -fno-stack-limit -O3')
          env.Append(CCFLAGS  = '-O3  -DNDEBUG -funroll-loops  ')

# Execute the SConscript.
SConscript('SConscript', exports=['env'],variant_dir=env['variant'], duplicate=False)

